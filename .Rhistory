# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("missMDA")
datos<-data("orange")
datos
View(orange)
datos<-data("orange")
data("orange")
rm(datos)
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("missMDA")
imputeMFA('orange')
Z<-scale('orange')
Z<-scale('orange',center = T,scale = T)
scale(orange$Color.intensity)
scale(orange$Odor.intensity)
scale(orange$Attack.intensity)
scale(orange$Sweet)
scale(orange$Acid)
scale(orange$Bitter)
as.matrix(orange)
datos<-as.matrix(orange)
datos
scale(datos)
njm=colMeans(datos,na.rm=TRUE); njs=colSums(datos,na.rm=TRUE)
njm
njs
nj=njs/njm
nj
nj=njs/njm
X=scale(datos)*sqrt(nj/(nj-1))
X
scale(datos)
imputeMFA(X,group = c(3,5),type = rep("s",length(group)))
length(group)
imputeMFA(X,group = c(3,5),type = rep("s",2))
imputeMFA(as.matrix(X),group = c(3,5),type = rep("s",length(group)))
X
as.type(X)
imputeMFA(as.data.frame(X),group = c(3,5),type = rep("s",length(group)))
imputeMFA(as.data.frame(X),group = c(3,5),type = rep("s",2))
X
matrizimputada<-imputeMFA(as.data.frame(X),group = c(3,5),type = rep("s",2))
matrizimputada
imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
19/96
library(FactoMineR)
library(Factoshiny)
install.packages('Factoshiny')
library(Factoshiny)
matrizoriginal
matrizoriginal<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
matrizoriginal
matrizoriginal1<-imputeMFA(as.data.frame(datos),group = c(5,3),type = rep("s",2))
matrizoriginal1
matrizoriginal
matrizoriginal1
imputeMFA()
imputeMFA
read.table("dataCalifiAFM.csv",header=T,sep=";",dec=".",row.names=1)->data
read.table("dataCalifiAFM.csv",header=T,sep=";",dec=".",row.names=1)->data
read.table("dataCalifiAFM.csv",header=T,sep=",",dec=".",row.names=1)->data
read.table("dataCalifiAFM.csv",header=T,sep=",",dec=";",row.names=1)->data
dataCalifiAFM <- read.csv("C:/Users/KEVINSTEVEN/Desktop/UNIVALLE/ESTADISTICA APLICADA III/archivos 1 practica AFM-20180928/dataCalifiAFM.csv", header=FALSE, row.names=1, sep=";")
View(dataCalifiAFM)
data<-dataCalifiAFM
res.mfa1 <- MFA(data[,1:6],group=c(3,3),type=c("s","s"),
name.group=c("Periodo1","Periodo2"))
read.table("C:/Users/KEVINSTEVEN/Desktop/UNIVALLE/ESTADISTICA APLICADA III/archivos 1 practica AFM-20180928/dataCalifiAFM.csv",header=T,sep=";",dec=".",row.names=1)->data
View(data)
res.mfa1 <- MFA(data[,1:6],group=c(3,3),type=c("s","s"),
name.group=c("Periodo1","Periodo2"))
res.mfa1 <- MFA(data[,1:6],group=c(3,3),type=c("s","s"),
name.group=c("Periodo1","Periodo2"))
MFAshiny(res.mfa1)
res.mfa <- MFA(as.data.frame(datos),group=c(3,5),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
MFAshiny(res.mfa)
matrizimputada<-imputeMFA(as.data.frame(X),group = c(5,3),type = rep("s",2)) #Imputación matriz estandariza
#AFM a la matriz dividida en las 3 primeras columnas y las 5 ultimas
matrizoriginal<-imputeMFA(as.data.frame(datos),group = c(5,3),type = rep("s",2))
res.mfa <- MFA(as.data.frame(datos),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
MFAshiny(res.mfa)
res.mfa <- MFA(as.data.frame(datos),group=c(3,5),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
datos
MFA
MFA(datos)
MFA(as.data.frame(datos))
res.mfa
res.mfa$eig
res.mfa$summary.quanti
min(datos[,1])
min(datos[,1],na.rm = T)
res.mfa1 <- MFA(as.data.frame(matrizoriginal),group=c(3,5),type=c("s","s"),
name.group=c("Intensidad","Periodo2"))
matrizoriginal1<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
res.mfa1 <- MFA(as.data.frame(matrizoriginal),group=c(3,5),type=c("s","s"),
name.group=c("Intensidad","Periodo2"))
res.mfa <- MFA(as.data.frame(datos),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
#AFM a la matriz dividida en las 3 primeras columnas y las 5 ultimas
matrizoriginal<-imputeMFA(as.data.frame(datos),group = c(5,3),type = rep("s",2))
res.mfa <- MFA(as.data.frame(datos),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
MFAshiny(res.mfa)
res.mfa2 <- MFA(as.data.frame(matrizoriginal),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
as.data.frame(matrizoriginal)
matrizoriginal
res.mfa2 <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
MFAshiny(res.mfa2)
MFAshiny(res.mfa)
matrizoriginal$completeObs
MFAshiny(res.mfa)
matrizoriginal2<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
res.mfa2 <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(3,5),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
MFAshiny(res.mfa2)
View(dataCalifiAFM)
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("missMDA")
data("orange") #Carga de base de datos
datos<-as.matrix(orange) #Volvemos el data frame una matriz
#Se reescala con la desviación no corregida:
njm=colMeans(datos,na.rm=TRUE); njs=colSums(datos,na.rm=TRUE)
nj=njs/njm
X=scale(datos)*sqrt(nj/(nj-1))
X
matrizimputada<-imputeMFA(as.data.frame(X),group = c(5,3),type = rep("s",2)) #Imputación matriz estandariza
matrizimputada
#AFM a la matriz dividida en las 3 primeras columnas y las 5 ultimas
matrizoriginal<-imputeMFA(as.data.frame(datos),group = c(5,3),type = rep("s",2))
res.mfa <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("missMDA")
res.mfa <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("missMDA")
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("FactoMineR")
res.mfa <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(5,3),type=c("s","s"),
name.group=c("Intensidad","Percepción"))
MFAshiny(res.mfa)
library("Factoshiny")
MFAshiny(res.mfa)
res.mfa
res.mfa
x11()
res.mfa
x11()
res.mfa$ind
View(orange)
library(FactoMineR)
data(wine)
View(wine)
#AFM a la matriz dividida en las 3 primeras columnas y las 5 ultimas
matrizoriginal<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
matrizoriginal
res.mfa <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(3,5),type=c("s","s"),
name.group=c("Percepción previa","Percepción posterior"))
MFAshiny(res.mfa)
orange
View(datos)
#Estadisticas descrptivas
summary(datos)
#Estadisticas descrptivas
summary(datos)
#Estadisticas descrptivas
summary(datos)
sd(datos)
sd(datos,na.rm = T)
datos
sd(orange,na.rm = T)
#Estadisticas descrptivas
summary(orange)
sd(orange$Color.intensity,na.rm = T)
sd(orange$Odor.intensity,na.rm = T)
sd(orange$Attack.intensity,na.rm = T)
sd(orange$Sweet,na.rm = T)
sd(orange$Acid,na.rm = T)
sd(orange$Bitter,na.rm = T)
sd(orange$Pulp,na.rm = T)
sd(orange$Typicity,na.rm = T)
#Estadisticas descrptivas
summary(orange)
matrizoriginal
matrizoriginal$completeObs
matrizimputada<-imputeMFA(as.data.frame(X),group = c(3,5),type = rep("s",2)) #Imputación matriz estandariza
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("FactoMineR")
library("Factoshiny")
library("missMDA")
data("orange") #Carga de base de datos
datos<-as.matrix(orange) #Volvemos el data frame una matriz
#Se reescala con la desviación no corregida:
njm=colMeans(datos,na.rm=TRUE); njs=colSums(datos,na.rm=TRUE)
nj=njs/njm
X=scale(datos)*sqrt(nj/(nj-1))
X
matrizimputada<-imputeMFA(as.data.frame(X),group = c(3,5),type = rep("s",2)) #Imputación matriz estandariza
#AFM a la matriz dividida en las 3 primeras columnas y las 5 ultimas
matrizoriginal<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
res.mfa <- MFA(as.data.frame(matrizoriginal$completeObs),group=c(3,5),type=c("s","s"),
name.group=c("Percepción previa","Percepción posterior"))
matrizoriginalEM<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2),method = "EM")
matrizoriginalEM$completeObs
matrizoriginalEM$completeObs
matrizoriginal$completeObs
datos
library("FactoMineR")
library("Factoshiny")
library("missMDA")
data("orange") #Carga de base de datos
datos<-as.matrix(orange) #Volvemos el data frame una matriz
#Se reescala con la desviación no corregida:
njm=colMeans(datos,na.rm=TRUE); njs=colSums(datos,na.rm=TRUE)
nj=njs/njm
X=scale(datos)*sqrt(nj/(nj-1)) #Matriz estandarizada con NA's
matrizimputada<-imputeMFA(as.data.frame(X),group = c(3,5),type = rep("s",2)) #Imputación matriz estandariza
#Estadisticas descrptivas
summary(orange)
#AFM a la matriz dividida en las 3 primeras columnas y las 5 ultimas
#Con imputación por medio del metodo regularizado:
matrizoriginalR<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2))
res.mfa <- MFA(as.data.frame(matrizoriginalR$completeObs),group=c(3,5),type=c("s","s"),
name.group=c("Percepción previa","Percepción posterior"))
MFAshiny(res.mfa)
#Con imputación por medio del metodo EM:
matrizoriginalEM<-imputeMFA(as.data.frame(datos),group = c(3,5),type = rep("s",2),method = "EM")
matrizoriginalEM$completeObs
matrizoriginalEM$completeObs #Matriz original imputada EM
res.mfa1 <- MFA(as.data.frame(matrizoriginalEM$completeObs),group=c(3,5),type=c("s","s"),
name.group=c("Percepción previa","Percepción posterior"))
MFAshiny(res.mfa1)
MFAshiny(res.mfa)
MFAshiny(res.mfa1)
res.mfa1
res.mfa1$eig
get_eigenvalue(res.mfa)
library("factoextra")
get_eigenvalue(res.mfa)
get_eigenvalue(res.mfa1)
fviz_eig(res.mfa)
x11()
fviz_eig(res.mfa)
get_mfa_ind(res.mfa)
res.mfa1
#Resultados para individuos
res.mfa1$ind
get_mfa_var(res.mfa)
#Resultados para variables
res.mfa1$quanti.var
#Nube de los grupos
res.mfa1$group
res.mfa1$separate.analyses
x11()
res.mfa1
x11()
res.mfa1$group
x11()
fviz_mfa_ind(res.mfa)
x11()
fviz_mfa_ind(res.mfa1)
x11()
fviz_mfa_var(res.mfa)
x11()
fviz_contrib(res.mfa1, "group", axes = 1)
x11()
fviz_contrib(res.mfa1, "group", axes = 2)
x11()
fviz_contrib(res.mfa1, "var", axes = 1)
x11()
fviz_contrib(res.mfa1, "quanti.var", axes = 1)
x11()
fviz_contrib(res.mfa1, "quanti.var", axes = 2)
x11()
fviz_mfa_axes(res.mfa1)
x11()
fviz_mfa_var(res.mfa)
x11()
fviz_mfa_var(res.mfa1)
res.mfa1
x11()
res.mfa1$group
x11()
res.mfa1$ind
x11()
res.mfa1$ind$coord
MFAshiny(res.mfa1)
x11()
fviz_mfa_quali_biplot(res.mfa1)
x11()
fviz_mfa_quali_biplot(res.mfa1,axes = c(1,2))
library(ade4)
#Representación superpuesta
xx<-data.frame(res.mfa1$ind$coord[,1],res.mfa1$ind$coord[,2])
xx
boxplot(xx)
boxplot(res.mfa1$ind$coord[,1])
boxplot(res.mfa1$ind$coord[,2])
yy<-data.frame(res.mfa1$ind$coord[,3],res.mfa1$ind$coord[,4])
boxplot(yy)
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
matrizoriginalR$completeObs
matrizoriginalR$completeObs
datos
get_eigenvalue(res.mfa1) #otra forma
library("FactoMineR")
library("Factoshiny")
library("factoextra")
library("missMDA")
get_eigenvalue(res.mfa1) #otra forma
x11()
fviz_eig(res.mfa)
x11()
fviz_mfa_ind(res.mfa1)
x11()
fviz_mfa_var(res.mfa1)
x11()
fviz_mfa_var(res.mfa1)
x11()
fviz_mfa_group(res.mfa1)
x11()
fviz_mfa_group(res.mfa1)
MFAshiny(res.mfa1)
x11()
fviz_mfa_group(res.mfa1,ylim=c(0,1))
x11()
fviz_mfa_group(res.mfa1,xlim=c(0,1),ylim=c(0,1))
res.mfa1$group
res.mfa1$group$Lg?
res.mfa1$group
res.mfa1
res.mfa1$group
x11()
fviz_contrib(res.mfa1, "quanti.var", axes = 1)
get_eigenvalue(res.mfa1) #otra forma
res.mfa1$group
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
res.mfa1$global.pca$call$X
x11()
res.mfa1$global.pca$call$X
res.mfa1$global.pca
x11()
res.mfa1$global.pca
x11()
fviz_mfa_axes(res.mfa1)
x11()
fviz_mfa_quali_biplot(res.mfa1)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
library(ade4)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
x11()
fviz_mfa_quali_biplot(res.mfa1, repel = FALSE, col.var = "#E7B800",
habillage = grp, addEllipses = TRUE, ellipse.level = 0.95)
x11()
fviz_mfa_quali_biplot(res.mfa1, repel = FALSE, col.var = "#E7B800",
addEllipses = TRUE, ellipse.level = 0.95)
x11()
fviz_mfa_quanti_biplot(res.mfa1, repel = FALSE, col.var = "#E7B800",
addEllipses = TRUE, ellipse.level = 0.95)
x11()
fviz_mfa_var(res.mfa1, "quanti.var", palette = "jco",
col.var.sup = "violet", repel = TRUE)
x11()
fviz_mfa_ind(res.mfa1, partial = "all")
x11()
fviz_mfa_axes(res.mfa1)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
res,res.mfa1$global.pca$var
res.mfa1$global.pca$var
res.mfa1$global.pca$ind
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
x11()
fviz_mfa_axes(res.mfa1)
library("FactoMineR")
library("Factoshiny")
library("factoextra")
library("missMDA")
library("ade4")
imputeMFA?
MFAshiny(res.mfa)
cite(FactoMineR)
cite("FactoMineR")
citation("FactoMineR")
citation("Factoshiny")
library("missMDA")
citation("missMDA")
# Kevin García - 1533173
# Alejandro Vargas - 1525953
#Alejandro Soto -
#Natalia Buitron -
# Laboratorio 3 - Aplicada III
# Datos Caso 8 Naranjas
library("FactoMineR")
library("Factoshiny")
library("factoextra")
library("missMDA")
library("ade4")
View(data)
x11()
fviz_mfa_ind(res.mfa1, partial = "all")
library(ade4)
dudi.acm
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE,pch = 2)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE,pch = 5)
x11()
s.label(res.mfa1$ind$coord,box=FALSE)
s.label(res.mfa1$quanti.var$coord,add.plot=TRUE)
res.mfa1$quanti.var$coord
res.mfa$quanti.var$coord
res.mfa1$var$coord[,1]
res.mfa1$quanti.var$coord[,1]
res.mfa1$quanti.var$coord[1:3,1]
View(data)
matrizoriginalEM$completeObs
matrizoriginalEM$completeObs[,-c(4,5,6,7,8)]
#Construcción indice
I=res.mfa1$quanti.var$coord[1:3,1]%*%t(matrizoriginalEM$completeObs[,-c(4,5,6,7,8)])
I
Ie=(I-min(I))/(max(I)-min(I))*100 #Reescalado de indices
Ie
I
